// Code generated by protoc-gen-go.
// source: netflow.proto
// DO NOT EDIT!

/*
Package netflow is a generated protocol buffer package.

It is generated from these files:
	netflow.proto

It has these top-level messages:
	Pfx
	Flow
	Intf
	Flows
*/
package netflow

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Pfx defines an IP prefix
type Pfx struct {
	// IPv4 or IPv6 address
	IP []byte `protobuf:"bytes,1,opt,name=IP,proto3" json:"IP,omitempty"`
	// Netmask
	Mask []byte `protobuf:"bytes,2,opt,name=mask,proto3" json:"mask,omitempty"`
}

func (m *Pfx) Reset()                    { *m = Pfx{} }
func (m *Pfx) String() string            { return proto.CompactTextString(m) }
func (*Pfx) ProtoMessage()               {}
func (*Pfx) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Pfx) GetIP() []byte {
	if m != nil {
		return m.IP
	}
	return nil
}

func (m *Pfx) GetMask() []byte {
	if m != nil {
		return m.Mask
	}
	return nil
}

// Flow defines a network flow
type Flow struct {
	// Router flow was received from
	Router []byte `protobuf:"bytes,1,opt,name=router,proto3" json:"router,omitempty"`
	// Address family
	Family uint32 `protobuf:"varint,2,opt,name=family" json:"family,omitempty"`
	// SRC IP address
	SrcAddr []byte `protobuf:"bytes,3,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	// DST IP address
	DstAddr []byte `protobuf:"bytes,4,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	// Protocol
	Protocol uint32 `protobuf:"varint,5,opt,name=protocol" json:"protocol,omitempty"`
	// Number of packets
	Packets uint32 `protobuf:"varint,6,opt,name=packets" json:"packets,omitempty"`
	// Size of flow
	Size uint64 `protobuf:"varint,7,opt,name=size" json:"size,omitempty"`
	// SNMP interface id flow was received on
	IntIn uint32 `protobuf:"varint,8,opt,name=int_in,json=intIn" json:"int_in,omitempty"`
	// SNMP interface if flow was transmitted on
	IntOut uint32 `protobuf:"varint,9,opt,name=int_out,json=intOut" json:"int_out,omitempty"`
	// Next Hop IP address
	NextHop []byte `protobuf:"bytes,10,opt,name=next_hop,json=nextHop,proto3" json:"next_hop,omitempty"`
	// SRC ASN
	SrcAs uint32 `protobuf:"varint,11,opt,name=src_as,json=srcAs" json:"src_as,omitempty"`
	// DST ASN
	DstAs uint32 `protobuf:"varint,12,opt,name=dst_as,json=dstAs" json:"dst_as,omitempty"`
	// NEXT HOP ASN
	NextHopAs uint32 `protobuf:"varint,13,opt,name=next_hop_as,json=nextHopAs" json:"next_hop_as,omitempty"`
	// Unix timestamp
	Timestamp int64 `protobuf:"varint,14,opt,name=timestamp" json:"timestamp,omitempty"`
	// SRC prefix
	SrcPfx *Pfx `protobuf:"bytes,15,opt,name=src_pfx,json=srcPfx" json:"src_pfx,omitempty"`
	// DST perfix
	DstPfx *Pfx `protobuf:"bytes,16,opt,name=dst_pfx,json=dstPfx" json:"dst_pfx,omitempty"`
	// SRC port
	SrcPort uint32 `protobuf:"varint,17,opt,name=src_port,json=srcPort" json:"src_port,omitempty"`
	// DST port
	DstPort uint32 `protobuf:"varint,18,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	// Samplerate
	Samplerate uint64 `protobuf:"varint,19,opt,name=samplerate" json:"samplerate,omitempty"`
}

func (m *Flow) Reset()                    { *m = Flow{} }
func (m *Flow) String() string            { return proto.CompactTextString(m) }
func (*Flow) ProtoMessage()               {}
func (*Flow) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Flow) GetRouter() []byte {
	if m != nil {
		return m.Router
	}
	return nil
}

func (m *Flow) GetFamily() uint32 {
	if m != nil {
		return m.Family
	}
	return 0
}

func (m *Flow) GetSrcAddr() []byte {
	if m != nil {
		return m.SrcAddr
	}
	return nil
}

func (m *Flow) GetDstAddr() []byte {
	if m != nil {
		return m.DstAddr
	}
	return nil
}

func (m *Flow) GetProtocol() uint32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

func (m *Flow) GetPackets() uint32 {
	if m != nil {
		return m.Packets
	}
	return 0
}

func (m *Flow) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Flow) GetIntIn() uint32 {
	if m != nil {
		return m.IntIn
	}
	return 0
}

func (m *Flow) GetIntOut() uint32 {
	if m != nil {
		return m.IntOut
	}
	return 0
}

func (m *Flow) GetNextHop() []byte {
	if m != nil {
		return m.NextHop
	}
	return nil
}

func (m *Flow) GetSrcAs() uint32 {
	if m != nil {
		return m.SrcAs
	}
	return 0
}

func (m *Flow) GetDstAs() uint32 {
	if m != nil {
		return m.DstAs
	}
	return 0
}

func (m *Flow) GetNextHopAs() uint32 {
	if m != nil {
		return m.NextHopAs
	}
	return 0
}

func (m *Flow) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Flow) GetSrcPfx() *Pfx {
	if m != nil {
		return m.SrcPfx
	}
	return nil
}

func (m *Flow) GetDstPfx() *Pfx {
	if m != nil {
		return m.DstPfx
	}
	return nil
}

func (m *Flow) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *Flow) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *Flow) GetSamplerate() uint64 {
	if m != nil {
		return m.Samplerate
	}
	return 0
}

// Intf groups an interfaces ID and name
type Intf struct {
	// ID is an interface ID
	Id uint32 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// name is an interfaces name
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *Intf) Reset()                    { *m = Intf{} }
func (m *Intf) String() string            { return proto.CompactTextString(m) }
func (*Intf) ProtoMessage()               {}
func (*Intf) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Intf) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Intf) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// Flows defines a groups of flows
type Flows struct {
	// Group of flows
	Flows []*Flow `protobuf:"bytes,1,rep,name=flows" json:"flows,omitempty"`
	// Mapping of interface names to IDs
	InterfaceMapping []*Intf `protobuf:"bytes,2,rep,name=interface_mapping,json=interfaceMapping" json:"interface_mapping,omitempty"`
}

func (m *Flows) Reset()                    { *m = Flows{} }
func (m *Flows) String() string            { return proto.CompactTextString(m) }
func (*Flows) ProtoMessage()               {}
func (*Flows) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Flows) GetFlows() []*Flow {
	if m != nil {
		return m.Flows
	}
	return nil
}

func (m *Flows) GetInterfaceMapping() []*Intf {
	if m != nil {
		return m.InterfaceMapping
	}
	return nil
}

func init() {
	proto.RegisterType((*Pfx)(nil), "netflow.pfx")
	proto.RegisterType((*Flow)(nil), "netflow.Flow")
	proto.RegisterType((*Intf)(nil), "netflow.Intf")
	proto.RegisterType((*Flows)(nil), "netflow.Flows")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Annotator service

type AnnotatorClient interface {
	Annotate(ctx context.Context, in *Flow, opts ...grpc.CallOption) (*Flow, error)
}

type annotatorClient struct {
	cc *grpc.ClientConn
}

func NewAnnotatorClient(cc *grpc.ClientConn) AnnotatorClient {
	return &annotatorClient{cc}
}

func (c *annotatorClient) Annotate(ctx context.Context, in *Flow, opts ...grpc.CallOption) (*Flow, error) {
	out := new(Flow)
	err := grpc.Invoke(ctx, "/netflow.annotator/Annotate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Annotator service

type AnnotatorServer interface {
	Annotate(context.Context, *Flow) (*Flow, error)
}

func RegisterAnnotatorServer(s *grpc.Server, srv AnnotatorServer) {
	s.RegisterService(&_Annotator_serviceDesc, srv)
}

func _Annotator_Annotate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Flow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnnotatorServer).Annotate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/netflow.annotator/Annotate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnnotatorServer).Annotate(ctx, req.(*Flow))
	}
	return interceptor(ctx, in, info, handler)
}

var _Annotator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "netflow.annotator",
	HandlerType: (*AnnotatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Annotate",
			Handler:    _Annotator_Annotate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "netflow.proto",
}

func init() { proto.RegisterFile("netflow.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xcd, 0x8e, 0xd3, 0x30,
	0x10, 0x26, 0x6d, 0xfa, 0x37, 0xdd, 0x2e, 0xbb, 0x46, 0x80, 0x59, 0xa1, 0x55, 0x15, 0x84, 0x14,
	0xf6, 0xb0, 0x87, 0x72, 0x40, 0xe2, 0xd6, 0x0b, 0xa2, 0x07, 0x44, 0x95, 0x17, 0x88, 0x4c, 0xe2,
	0xb0, 0xd6, 0x26, 0xb6, 0x65, 0x4f, 0xb5, 0x81, 0xb7, 0xe0, 0x8d, 0xd1, 0xd8, 0x69, 0x61, 0x11,
	0x37, 0x7f, 0x3f, 0x33, 0xfe, 0xec, 0x19, 0x58, 0x69, 0x89, 0x4d, 0x6b, 0x1e, 0x6e, 0xad, 0x33,
	0x68, 0xd8, 0x6c, 0x80, 0xd9, 0x3b, 0x18, 0xdb, 0xa6, 0x67, 0xe7, 0x30, 0xda, 0xed, 0x79, 0xb2,
	0x4e, 0xf2, 0xb3, 0x62, 0xb4, 0xdb, 0x33, 0x06, 0x69, 0x27, 0xfc, 0x3d, 0x1f, 0x05, 0x26, 0x9c,
	0xb3, 0x5f, 0x29, 0xa4, 0x9f, 0x5a, 0xf3, 0xc0, 0x5e, 0xc0, 0xd4, 0x99, 0x03, 0x4a, 0x37, 0x14,
	0x0c, 0x88, 0xf8, 0x46, 0x74, 0xaa, 0xfd, 0x11, 0xca, 0x56, 0xc5, 0x80, 0xd8, 0x2b, 0x98, 0x7b,
	0x57, 0x95, 0xa2, 0xae, 0x1d, 0x1f, 0x87, 0x8a, 0x99, 0x77, 0xd5, 0xb6, 0xae, 0x1d, 0x49, 0xb5,
	0xc7, 0x28, 0xa5, 0x51, 0xaa, 0x3d, 0x06, 0xe9, 0x0a, 0xe6, 0x21, 0x6b, 0x65, 0x5a, 0x3e, 0x09,
	0xfd, 0x4e, 0x98, 0x71, 0x98, 0x59, 0x51, 0xdd, 0x4b, 0xf4, 0x7c, 0x1a, 0xa4, 0x23, 0xa4, 0xe0,
	0x5e, 0xfd, 0x94, 0x7c, 0xb6, 0x4e, 0xf2, 0xb4, 0x08, 0x67, 0xf6, 0x1c, 0xa6, 0x4a, 0x63, 0xa9,
	0x34, 0x9f, 0x07, 0xf3, 0x44, 0x69, 0xdc, 0x69, 0xf6, 0x12, 0x66, 0x44, 0x9b, 0x03, 0xf2, 0x45,
	0xcc, 0xab, 0x34, 0x7e, 0x3d, 0x20, 0x85, 0xd2, 0xb2, 0xc7, 0xf2, 0xce, 0x58, 0x0e, 0x31, 0x14,
	0xe1, 0xcf, 0xc6, 0x52, 0xab, 0xf0, 0x14, 0xcf, 0x97, 0xb1, 0x15, 0x3d, 0xc4, 0x13, 0x1d, 0x9e,
	0xe1, 0xf9, 0x59, 0xa4, 0xe9, 0x11, 0x9e, 0x5d, 0xc3, 0xf2, 0xd8, 0x88, 0xb4, 0x55, 0xd0, 0x16,
	0x43, 0xaf, 0xad, 0x67, 0xaf, 0x61, 0x81, 0xaa, 0x93, 0x1e, 0x45, 0x67, 0xf9, 0xf9, 0x3a, 0xc9,
	0xc7, 0xc5, 0x1f, 0x82, 0xbd, 0x05, 0xfa, 0xa6, 0xd2, 0x36, 0x3d, 0x7f, 0xba, 0x4e, 0xf2, 0xe5,
	0xe6, 0xec, 0xf6, 0x34, 0xc4, 0xa6, 0x2f, 0x28, 0xc8, 0xbe, 0xe9, 0xc9, 0x46, 0x77, 0x93, 0xed,
	0xe2, 0x7f, 0xb6, 0xda, 0x23, 0xd9, 0x86, 0x21, 0x58, 0xe3, 0x90, 0x5f, 0xc6, 0x3f, 0xa3, 0x06,
	0xc6, 0xe1, 0x71, 0x08, 0x41, 0x62, 0x51, 0xa2, 0x22, 0x92, 0xae, 0x01, 0xbc, 0xe8, 0x6c, 0x2b,
	0x9d, 0x40, 0xc9, 0x9f, 0x85, 0x4f, 0xfd, 0x8b, 0xc9, 0x6e, 0x20, 0xdd, 0x69, 0x6c, 0x68, 0x7f,
	0x54, 0x1d, 0xd6, 0x61, 0x55, 0x8c, 0x54, 0x4d, 0x63, 0xd0, 0xa2, 0x93, 0x61, 0x11, 0x16, 0x45,
	0x38, 0x67, 0x77, 0x30, 0xa1, 0xf5, 0xf1, 0xec, 0x0d, 0x4c, 0x28, 0x9e, 0xe7, 0xc9, 0x7a, 0x9c,
	0x2f, 0x37, 0xab, 0x53, 0x5e, 0x92, 0x8b, 0xa8, 0xb1, 0x8f, 0x70, 0xa9, 0x34, 0x4a, 0xd7, 0x88,
	0x4a, 0x96, 0x9d, 0xb0, 0x56, 0xe9, 0xef, 0x7c, 0xf4, 0x4f, 0x01, 0xdd, 0x5d, 0x5c, 0x9c, 0x7c,
	0x5f, 0xa2, 0x6d, 0xf3, 0x01, 0x16, 0x42, 0x6b, 0x83, 0x02, 0x8d, 0x63, 0x37, 0x30, 0xdf, 0x46,
	0x20, 0xd9, 0xe3, 0xab, 0xae, 0x1e, 0xc3, 0xec, 0xc9, 0xb7, 0x69, 0xd8, 0xb0, 0xf7, 0xbf, 0x03,
	0x00, 0x00, 0xff, 0xff, 0x2a, 0x39, 0x13, 0x10, 0x2e, 0x03, 0x00, 0x00,
}
